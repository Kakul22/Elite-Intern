# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14o1LtdYVw63tVXwuVbdz8XRYDIqToqdO
"""

!pip install scikit-learn pandas matplotlib seaborn

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df=pd.read_csv('/content/titanic.csv')

df.head()

df.isnull().sum()

print(df.isnull().sum())

# Visualize missing
sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Data Heatmap")
plt.show()

data = df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Survived']]

data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)

le_sex = LabelEncoder()
data['Sex'] = le_sex.fit_transform(data['Sex'])

data.isnull().sum()

le_emb = LabelEncoder()
data['Embarked'] = le_emb.fit_transform(data['Embarked'])

data.head()

# Define X and y
X = data.drop('Survived', axis=1)
y = data['Survived']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train logistic regression
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)
# Correlation heatmap
sns.heatmap(data.corr(), annot=True, cmap="coolwarm")
plt.title("Titanic Feature Correlation with Survived")
plt.show()

X = data.drop('Survived', axis=1)
y = data['Survived']

# Check for nulls
print("Any nulls in X?\n", X.isnull().sum())

# Fill nulls if any
X = X.fillna(0)

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)

print(" Accuracy:", accuracy_score(y_test, y_pred))
print(" Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print(" Classification Report:\n", classification_report(y_test, y_pred))

print(f"""
Predictive Analysis Insights:
- Logistic Regression model trained on Titanic dataset.
- Accuracy: {accuracy_score(y_test, y_pred)*100:.2f}%
- Features most correlated with survival: Sex, Pclass, Fare.
- Model demonstrates end-to-end ML workflow: feature selection, training, evaluation.
""")

